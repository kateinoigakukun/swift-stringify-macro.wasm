From 571cea0c0b2a450eb30f04bb7191d29a3646e75b Mon Sep 17 00:00:00 2001
From: Yuta Saito <kateinoigakukun@gmail.com>
Date: Fri, 25 Oct 2024 03:54:44 +0900
Subject: [PATCH] Add Wasm Macro boilerplate to Package.swift

---
 Package.swift | 73 ++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 72 insertions(+), 1 deletion(-)

diff --git a/Package.swift b/Package.swift
index 32ea88b..2613d48 100644
--- a/Package.swift
+++ b/Package.swift
@@ -33,7 +33,7 @@ let package = Package(
   ],
 
   dependencies: [
-    .package(url: "https://github.com/swiftlang/swift-syntax.git", from: "600.0.0"),
+    .package(url: "https://github.com/swiftlang/swift-syntax.git", revision: "swift-DEVELOPMENT-SNAPSHOT-2024-10-08-a"),
   ],
 
   targets: [
@@ -177,3 +177,74 @@ extension Array where Element == PackageDescription.CXXSetting {
     return result
   }
 }
+
+if Context.environment["SWIFT_BUILD_MACRO_WASM"] != nil {
+    // Ad-hoc build hack for building macro targets as WebAssembly executables
+    for (index, target) in package.targets.enumerated() {
+        guard case .macro = target.type else { continue }
+        package.targets[index] = .executableTarget(name: target.name, dependencies: target.dependencies, exclude: target.exclude, swiftSettings: target.swiftSettings)
+    }
+} else if let swiftPluginServerPath = Context.environment["SWIFT_PLUGIN_SERVER_PATH"] {
+    // Ad-hoc build hack for loading WebAssembly executables placed in `Sources/<target>.wasm`
+    // as Swift compiler plugins
+
+    func dependencyName(_ dependency: Target.Dependency) -> String? {
+        switch dependency {
+        case let .targetItem(name: name, condition: _),
+            let .byNameItem(name: name, condition: _):
+            return name
+        default:
+            return nil
+        }
+    }
+
+    // Find targets that (transitively) depend on macro targets
+    var dependents = [String: [Target]]()
+    for target in package.targets {
+        for dependency in target.dependencies {
+            if let name = dependencyName(dependency) {
+                dependents[name, default: []].append(target)
+            }
+        }
+    }
+
+    func transitivelyDependentTargets(of targetName: String) -> [Target] {
+        var visited = Set<String>()
+        var result = [Target]()
+        var queue = [targetName]
+        while let current = queue.popLast() {
+            guard let currentDependents = dependents[current] else { continue }
+            for dependent in currentDependents {
+                if visited.insert(dependent.name).inserted {
+                    result.append(dependent)
+                    queue.append(dependent.name)
+                }
+            }
+        }
+        return result
+    }
+
+    let macroTargets = package.targets.reduce(into: [String: Target]()) { result, target in
+        if case .macro = target.type {
+            result[target.name] = target
+        }
+    }
+
+    for macroTarget in macroTargets.values {
+        let wasmPath = Context.packageDirectory + "/" + (macroTarget.path ?? "Sources/\(macroTarget.name)") + ".wasm"
+
+        for target in transitivelyDependentTargets(of: macroTarget.name) {
+            var swiftSettings = target.swiftSettings ?? []
+
+            swiftSettings.append(.unsafeFlags([
+                "-Xfrontend", "-load-plugin",
+                "-Xfrontend", "\(wasmPath)#\(swiftPluginServerPath)#\(macroTarget.name)",
+            ]))
+            target.swiftSettings = swiftSettings
+            // Remove the macro target from the dependencies
+            target.dependencies.removeAll { dependency in
+                dependencyName(dependency) == macroTarget.name
+            }
+        }
+    }
+}
-- 
2.39.5 (Apple Git-154)

